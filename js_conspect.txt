
В js есть несколько типов значений: фиксированные (литералы), значения констант, значения переменных:
25 (литерал целого числа), 23.8 (литерал дробного числа), 'JavaScript' (литерал строки), [15,7,89] (литерал массива),
{name: 'Yaroslav' surname: 'Domagic'} (литерал объекта), (ab|bc) (литерал регулярного выражения) 
-----------------------------------------------

константы и переменные используются для хранения значений данных:
const MAX_VALUE = 17; - константа
var section = 'JS'; - переменная
let arr = ['HTML','CSS','JS']; - переменная
.
ПЕРЕМЕННАЯ:
-- ключевое слово let для объявления переменной. Имя переменной может сожержать только буквы, цифры, символы($_), 
первый символ не должен быть цифрой. Если переменная состоит из нескольких слов, то каждое следующее слово с большой 
буквы (leftSidebarSize).  
-- может объявляться без значения (let sidebar) и со значением (let sidebar = 'left';). Если объявляли переменную без 
значения, то потом значение можно писать без let (sidebar = 'left'). Переменные стоит объявлять в столбик используя let 
либо один раз либо каждый: 
let myName = 'Ярик', 
    myAge = '33',
    myMessage = 'учись сильнее';
-- Значение переменной можно менять по ходу и будет применяться последнее значение. Переменные могут передавать значение.
myAge = myNewAge;
.
КОНСТАНТА (та же переменная, но ее значение нельзя изменить)
-- ключевое слово const. Все тоже самое что и let кроме ряда нюансов: 
имена констант с заранее известными значениями пишутся верхним регистром через нижнее подчеркивание
const BLOCK_SIZE = 25; 
const COLOR_RED = '#F00';
.
VAR (та же переменная но с рядом отличий)
-- ключевое слово var. Использовать переменную можно до ее ообъявления (в отличии от let) 
age = 35;
var age;
-- Область видимости. В условиях, циклах (if...) var будет видна за пределами блока (в отличии от let):
if(true) {
  var sizeVar = 50;
}
-----------------------------------------------------------------------------

ТИПЫ ДАННЫХ 
-- тип данных переменной меняется динамически в момент присвоения либо смены ее значения, а не в момент объявления.
оператор typeof (console.log(typeof userName)) покажет тип данных переменной (строка, число...)
.
Undefined - неопределенный (если объявлена переменная, но не присвоено значение)
Null - также как и undefined, содержит только одно значение null (переменная определена, но ее значение равно ничего или 
неизвестно)
Boolean - булевый или логический тип. Может принимать только два значения true и false (используется для хранения
значений да/нет 
Number - числовой тип данных представляет значение как в виде целых чисел, так и в виде чисел с плавающей точкой. NaN - 
означает математическую вычислительную ошибку (результат неправильной или неопределённой математической операции)
BigInt - был добавлен чтобы дать возможность работать с целыми числами произвольной длины 
const bigInt = 1234567890123456789012345678901234567890n ("n" в конце означает, что это BigInt)
String (cтрока) - должна быть заключена в кавычки ("", '', ``(позволяют встраивать выражения в строку, заключая их в ${…})
let name = "Иван";
Вставим переменную
alert( `Привет, ${name}!` ); - Привет, Иван!
Object - в объектах хранят набор данных или более сложные структуры.
let userInfo = {
  name: "Yarik",    (содержит набор необязательных свойств - пара ключ+значение. Разделяются запятой) 
  age: "33"	    
}
Symbol - для уникальных идентификаторов. ( пример let id = Symbol("id"); )
.
ПРЕОБРАЗОВАНИЕ типов данных: 
-- Строковое – когда нужно что-то вывести. Может быть вызвано с помощью String(value). Для примитивных значений работает 
очевидным образом.

let value = true;
alert(typeof value); (выведет boolean)
value = String(value); (теперь value это строка "true")
alert(typeof value);  (выведет string)

-- Численное – происходит в математических операциях. Может быть вызвано с помощью Number(value)

let str = "123";
alert(typeof str); (выведет string)
let num = Number(str); (становится числом 123)
alert(typeof num);  (выведет number) 

-- Логическое – происходит в логических операциях. Может быть вызвано с помощью Boolean(value).

alert( Boolean(1) ); (выведет true)
alert( Boolean(0) ); (выведет false)
alert( Boolean("Привет!") ); (true)
alert( Boolean("") );        (false)

------------------------------------------------------------------------------

Взаимодействие alert, promt, confirm 
-- alert - показывает сообщение и ждет, пока пользователь нажмёт кнопку ОК (alert("Hello");)
-- prompt - принимает два аргумента. Отобразит модальное окно с текстом, полем для ввода текста и кнопками OK/Отмена.
Вызов prompt возвращает текст, указанный в поле для ввода, или null, если ввод отменён пользователем.
let age = prompt('Сколько тебе лет?', 100);
alert(`Тебе ${age} лет!`);
-- confirm отображает модальное окно с текстом вопроса и двумя кнопками: OK (true) и Отмена (false)
let isBoss = confirm("Ты здесь главный?");
alert( isBoss ); (віведет true, если нажата OK)
------------------------------------------------------------------------------

Операторы. Обозначают операцию, которую нужно произвести: 
* / + - =        -  (пример console.log('Learn'+'JS');
.

Выражение (expression) - комбинация значений, переменных и операторов, которые либо присваивают какое-то значение,
либо возвращают какое-то значение без его присваения: 
let num = 4; - выражение присвоения
console.log(num);
'Learn' + 'JS' - выражение без присвоения
.
Блоки инструкций (фигурные скобочки - {}). 
function name() {
 console.log('Learn');
 console.log('JS');
}
name();